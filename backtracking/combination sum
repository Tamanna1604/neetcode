class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> subsets = new ArrayList<>();
        List<Integer> result = new ArrayList<>();
        helper(0, candidates, target, result, subsets);
        return subsets;
    }

    void helper(int ind, int[] candidates, int target, List<Integer> result, List<List<Integer>> subsets) {
        if (target == 0) {
            subsets.add(new ArrayList<>(result)); // Add a copy
            return;
        }

        if (ind == candidates.length || target < 0) return;

        // Take the current element
        result.add(candidates[ind]);
        helper(ind, candidates, target - candidates[ind], result, subsets); // same index, unlimited use
        result.remove(result.size() - 1); // backtrack

        // Skip the current element
        helper(ind + 1, candidates, target, result, subsets);
    }
}
