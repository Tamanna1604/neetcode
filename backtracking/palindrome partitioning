class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> current = new ArrayList<>();
        helper(s, 0, current, result);
        return result;
    }

    private void helper(String s, int start, List<String> current, List<List<String>> result) {
        // Base case: if we've reached the end of the string, add the current partition
        if (start == s.length()) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int end = start; end < s.length(); end++) {
            String prefix = s.substring(start, end + 1);
            if (isPalindrome(prefix)) {
                current.add(prefix);                       // choose
                helper(s, end + 1, current, result);       // explore
                current.remove(current.size() - 1);        // un-choose (backtrack)
            }
        }
    }

    private boolean isPalindrome(String str) {
        int l = 0, r = str.length() - 1;
        while (l < r) {
            if (str.charAt(l++) != str.charAt(r--)) return false;
        }
        return true;
    }
}
