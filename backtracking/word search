class Solution {
    public boolean exist(char[][] board, String word) {
        int n = board.length;
        int m = board[0].length;
        boolean[][] visited = new boolean[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == word.charAt(0)) {
                    if (dfs(i, j, board, word, 0, visited)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    boolean dfs(int i, int j, char[][] board, String word, int ind, boolean[][] visited) {
        int n = board.length;
        int m = board[0].length;

        // Out of bounds or already visited
        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {
            return false;
        }

        if (board[i][j] != word.charAt(ind)) {
            return false;
        }

        // All characters matched
        if (ind == word.length() - 1) {
            return true;
        }

        visited[i][j] = true;

        // Explore 4 directions
        boolean found = dfs(i + 1, j, board, word, ind + 1, visited) ||
                        dfs(i - 1, j, board, word, ind + 1, visited) ||
                        dfs(i, j + 1, board, word, ind + 1, visited) ||
                        dfs(i, j - 1, board, word, ind + 1, visited);

        visited[i][j] = false; // backtrack
        return found;
    }
}
