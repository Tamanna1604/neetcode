import java.util.*;

class Twitter {
    
    private static int timestamp = 0;

    // Map: userId -> list of tweets (each tweet is a pair of tweetId and timestamp)
    private Map<Integer, List<Tweet>> tweetsMap;

    // Map: userId -> set of followees
    private Map<Integer, Set<Integer>> follows;

    // Tweet class to store tweetId and time
    private static class Tweet {
        int id;
        int time;

        Tweet(int id, int time) {
            this.id = id;
            this.time = time;
        }
    }

    public Twitter() {
        tweetsMap = new HashMap<>();
        follows = new HashMap<>();
    }

    public void postTweet(int userId, int tweetId) {
        tweetsMap.putIfAbsent(userId, new ArrayList<>());
        tweetsMap.get(userId).add(new Tweet(tweetId, timestamp++));
    }

    public List<Integer> getNewsFeed(int userId) {
        PriorityQueue<Tweet> minHeap = new PriorityQueue<>((a, b) -> a.time - b.time);

        // Ensure user follows themselves
        follow(userId, userId);

        for (int followeeId : follows.getOrDefault(userId, new HashSet<>())) {
            List<Tweet> tweets = tweetsMap.getOrDefault(followeeId, new ArrayList<>());
            for (int i = tweets.size() - 1; i >= 0; i--) {
                Tweet tweet = tweets.get(i);
                minHeap.offer(tweet);
                if (minHeap.size() > 10) {
                    minHeap.poll();
                }
            }
        }

        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll().id);
        }
        Collections.reverse(result); // Most recent first
        return result;
    }

    public void follow(int followerId, int followeeId) {
        follows.putIfAbsent(followerId, new HashSet<>());
        follows.get(followerId).add(followeeId);
    }

    public void unfollow(int followerId, int followeeId) {
        if (followerId == followeeId) return; // Can't unfollow self
        follows.getOrDefault(followerId, new HashSet<>()).remove(followeeId);
    }
}
