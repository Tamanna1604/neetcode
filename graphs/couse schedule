import java.util.*;

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // Step 1: Build adjacency list and indegree array
        Map<Integer, List<Integer>> adj = new HashMap<>();
        int[] indegree = new int[numCourses];

        for (int[] pair : prerequisites) {
            int dest = pair[0], src = pair[1];
            adj.computeIfAbsent(src, k -> new ArrayList<>()).add(dest);
            indegree[dest]++;
        }

        // Step 2: Add all nodes with 0 indegree to queue
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }

        // Step 3: BFS to process courses
        int count = 0;
        while (!q.isEmpty()) {
            int curr = q.poll();
            count++;

            if (adj.containsKey(curr)) {
                for (int neighbor : adj.get(curr)) {
                    indegree[neighbor]--;
                    if (indegree[neighbor] == 0) {
                        q.offer(neighbor);
                    }
                }
            }
        }

        // Step 4: If all courses are processed, return true
        return count == numCourses;
    }
}
