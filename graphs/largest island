class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int max = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && grid[i][j] == 1) {
                    int area = dfs(i, j, grid, visited);
                    max = Math.max(max, area);
                }
            }
        }
        return max;
    }

    int dfs(int i, int j, int[][] grid, boolean[][] visited) {
        int n = grid.length;
        int m = grid[0].length;

        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j] || grid[i][j] == 0) {
            return 0;
        }

        visited[i][j] = true;

        return 1 +
            dfs(i + 1, j, grid, visited) +
            dfs(i - 1, j, grid, visited) +
            dfs(i, j + 1, grid, visited) +
            dfs(i, j - 1, grid, visited);
    }
}
