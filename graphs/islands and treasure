class Solution {
    public void islandsAndTreasure(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        int INF = 2147483647;

        // Add all treasure chests (value 0) to the queue
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 0) {
                    q.offer(new int[]{i, j});
                }
            }
        }

        int[][] dirs = {{0,1}, {1,0}, {0,-1}, {-1,0}};

        // BFS
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int x = curr[0], y = curr[1];

            for (int[] d : dirs) {
                int nx = x + d[0], ny = y + d[1];

                if (nx >= 0 && ny >= 0 && nx < n && ny < m && grid[nx][ny] == INF) {
                    grid[nx][ny] = grid[x][y] + 1;
                    q.offer(new int[]{nx, ny});
                }
            }
        }
    }
}
