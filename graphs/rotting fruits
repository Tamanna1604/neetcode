class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        Queue<int[]> q = new LinkedList<>();
        int fresh = 0;

        // Step 1: Add all rotten fruits to queue, count fresh
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.offer(new int[]{i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }

        // Edge case: No fresh fruits to begin with
        if (fresh == 0) return 0;

        int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
        int minutes = -1;

        // Step 2: BFS to rot adjacent fresh fruits
        while (!q.isEmpty()) {
            int size = q.size();
            minutes++;
            for (int k = 0; k < size; k++) {
                int[] curr = q.poll();
                int x = curr[0], y = curr[1];

                for (int[] d : dirs) {
                    int nx = x + d[0], ny = y + d[1];
                    if (nx >= 0 && ny >= 0 && nx < n && ny < m && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2;  // rot it
                        fresh--;
                        q.offer(new int[]{nx, ny});
                    }
                }
            }
        }

        // Step 3: If fresh fruits remain, return -1
        return fresh == 0 ? minutes : -1;
    }
}
