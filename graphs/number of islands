class Solution {
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int count = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    dfs(i, j, grid, visited);
                    count++;
                }
            }
        }
        return count; // Fixed: was 'countl'
    }

    void dfs(int i, int j, char[][] grid, boolean[][] visited) {
        int n = grid.length;
        int m = grid[0].length;

        // Check for out-of-bound or invalid cell
        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j] || grid[i][j] == '0') {
            return;
        }

        visited[i][j] = true;

        // Explore all 4 directions
        dfs(i + 1, j, grid, visited);
        dfs(i - 1, j, grid, visited);
        dfs(i, j + 1, grid, visited);
        dfs(i, j - 1, grid, visited);
    }
}
