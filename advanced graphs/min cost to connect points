import java.util.*;

class Solution {
    class Edge {
        int u; // index of point1
        int v; // index of point2
        int dist;

        Edge(int u, int v, int dist) {
            this.u = u;
            this.v = v;
            this.dist = dist;
        }
    }

    int find(int x, int[] parent) {
        if (parent[x] != x)
            parent[x] = find(parent[x], parent);
        return parent[x];
    }

    void union(int x, int y, int[] parent, int[] rank) {
        int rootX = find(x, parent);
        int rootY = find(y, parent);

        if (rootX == rootY) return;

        if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
    }

    public int minCostConnectPoints(int[][] points) {
        int n = points.length;

        // Step 1: Create all edges
        PriorityQueue<Edge> pq = new PriorityQueue<>((a, b) -> a.dist - b.dist);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int dist = Math.abs(points[i][0] - points[j][0]) +
                           Math.abs(points[i][1] - points[j][1]);
                pq.offer(new Edge(i, j, dist));
            }
        }

        // Step 2: Kruskal's algorithm with Union-Find
        int[] parent = new int[n];
        int[] rank = new int[n];
        for (int i = 0; i < n; i++) parent[i] = i;

        int cost = 0, edgesUsed = 0;
        while (!pq.isEmpty() && edgesUsed < n - 1) {
            Edge edge = pq.poll();
            int uRoot = find(edge.u, parent);
            int vRoot = find(edge.v, parent);

            if (uRoot != vRoot) {
                union(uRoot, vRoot, parent, rank);
                cost += edge.dist;
                edgesUsed++;
            }
        }

        return cost;
    }
}
