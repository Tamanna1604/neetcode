import java.util.*;

class Solution {
    class Pair {
        int position;
        double time;

        Pair(int pos, double t) {
            position = pos;
            time = t;
        }
    }

    public int carFleet(int target, int[] position, int[] speed) {
        int n = position.length;
        List<Pair> li = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            double time = (double)(target - position[i]) / speed[i];
            li.add(new Pair(position[i], time));
        }

        // Sort cars by position in descending order
        Collections.sort(li, (a, b) -> b.position - a.position);

        Stack<Double> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            double currTime = li.get(i).time;
            if (st.isEmpty() || currTime > st.peek()) {
                st.push(currTime); // new fleet
            }
            // else: current car joins the fleet ahead (do nothing)
        }

        return st.size(); // number of fleets
    }
}
