class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n + 1][amount + 1];
        int INF = (int) 1e9;

        // Base case initialization
        for (int j = 1; j <= amount; j++) {
            dp[0][j] = INF; // 0 coins can't make any amount > 0
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= amount; j++) {
                // Don't take the coin
                dp[i][j] = dp[i - 1][j];

                // Take the coin (if possible)
                if (j >= coins[i - 1]) {
                    dp[i][j] = Math.min(dp[i][j], 1 + dp[i][j - coins[i - 1]]);
                }
            }
        }

        return dp[n][amount] >= INF ? -1 : dp[n][amount];
    }
}
