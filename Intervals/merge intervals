import java.util.*;

public class MergeIntervals {
    public int[][] merge(int[][] intervals) {
        if (intervals.length <= 1) return intervals;

        // Step 1: Sort by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> result = new ArrayList<>();
        int[] current = intervals[0];
        result.add(current);

        for (int[] interval : intervals) {
            int currentEnd = current[1];
            int nextStart = interval[0];
            int nextEnd = interval[1];

            if (nextStart <= currentEnd) {
                // Overlapping intervals, merge them
                current[1] = Math.max(currentEnd, nextEnd);
            } else {
                // Non-overlapping, move to next
                current = interval;
                result.add(current);
            }
        }

        return result.toArray(new int[result.size()][]);
    }

    public static void main(String[] args) {
        MergeIntervals solution = new MergeIntervals();
        
        int[][] intervals1 = {{1, 3}, {1, 5}, {6, 7}};
        int[][] result1 = solution.merge(intervals1);
        for (int[] interval : result1) {
            System.out.print(Arrays.toString(interval) + " ");
        }
        System.out.println(); // Output: [1, 5] [6, 7]

        int[][] intervals2 = {{1, 2}, {2, 3}};
        int[][] result2 = solution.merge(intervals2);
        for (int[] interval : result2) {
            System.out.print(Arrays.toString(interval) + " ");
        }
        System.out.println(); // Output: [1, 3]
    }
}
