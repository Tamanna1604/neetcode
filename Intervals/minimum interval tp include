import java.util.*;

public class Solution {
    public int[] minInterval(int[][] intervals, int[] queries) {
        int n = intervals.length, m = queries.length;
        int[] res = new int[m];
        Arrays.fill(res, -1);

        // Sort intervals by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        // Pair queries with their original indices and sort by query value
        int[][] queriesWithIdx = new int[m][2];
        for (int i = 0; i < m; i++) {
            queriesWithIdx[i][0] = queries[i];
            queriesWithIdx[i][1] = i;
        }
        Arrays.sort(queriesWithIdx, (a, b) -> Integer.compare(a[0], b[0]));

        // Min-heap by interval length
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> Integer.compare(a[1] - a[0], b[1] - b[0]));

        int i = 0;  // pointer to intervals
        for (int[] q : queriesWithIdx) {
            int queryVal = q[0];
            int queryIdx = q[1];

            // Add all intervals starting before or at the query
            while (i < n && intervals[i][0] <= queryVal) {
                minHeap.offer(intervals[i]);
                i++;
            }

            // Remove intervals that end before queryVal (don't cover query)
            while (!minHeap.isEmpty() && minHeap.peek()[1] < queryVal) {
                minHeap.poll();
            }

            // Top of heap is smallest covering interval, if any
            if (!minHeap.isEmpty()) {
                int[] interval = minHeap.peek();
                res[queryIdx] = interval[1] - interval[0] + 1;
            }
        }

        return res;
    }

    // For testing:
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] intervals = {{1,3},{2,3},{3,7},{6,6}};
        int[] queries = {2,3,1,7,6,8};

        int[] ans = sol.minInterval(intervals, queries);
        System.out.println(Arrays.toString(ans)); // Output: [2, 2, 3, 5, 1, -1]
    }
}
