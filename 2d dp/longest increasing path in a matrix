class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);  // Use -1 to indicate unvisited
        }

        int max = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max = Math.max(max, dfs(i, j, -1, matrix, dp));
            }
        }

        return max;
    }

    int dfs(int i, int j, int prev, int[][] matrix, int[][] dp) {
        int n = matrix.length;
        int m = matrix[0].length;

        if (i < 0 || j < 0 || i >= n || j >= m || matrix[i][j] <= prev) {
            return 0;
        }

        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int val = matrix[i][j];

        int down = dfs(i + 1, j, val, matrix, dp);
        int up = dfs(i - 1, j, val, matrix, dp);
        int right = dfs(i, j + 1, val, matrix, dp);
        int left = dfs(i, j - 1, val, matrix, dp);

        dp[i][j] = 1 + Math.max(Math.max(up, down), Math.max(left, right));
        return dp[i][j];
    }
}
