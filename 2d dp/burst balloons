class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length;

        // Pad with 1 at both ends
        int[] balloons = new int[n + 2];
        balloons[0] = balloons[n + 1] = 1;
        for (int i = 0; i < n; i++) {
            balloons[i + 1] = nums[i];
        }

        int[][] dp = new int[n + 2][n + 2];

        // Gap-based DP
        for (int len = 2; len <= n + 1; len++) {
            for (int left = 0; left <= n + 1 - len; left++) {
                int right = left + len;
                for (int k = left + 1; k < right; k++) {
                    dp[left][right] = Math.max(
                        dp[left][right],
                        dp[left][k] + balloons[left] * balloons[k] * balloons[right] + dp[k][right]
                    );
                }
            }
        }

        return dp[0][n + 1];  // max coins from bursting all real balloons
    }
}
