class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 2][2]; // +2 to handle index + 2 without out of bounds

        for (int i = n - 1; i >= 0; i--) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                if (canBuy == 1) {
                    int buy = -prices[i] + dp[i + 1][0];
                    int skip = dp[i + 1][1];
                    dp[i][1] = Math.max(buy, skip);
                } else {
                    int sell = prices[i] + dp[i + 2][1];
                    int skip = dp[i + 1][0];
                    dp[i][0] = Math.max(sell, skip);
                }
            }
        }

        return dp[0][1]; // Start from day 0, with permission to buy
    }
}
